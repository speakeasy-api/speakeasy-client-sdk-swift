// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

/// Defines the operations supported by the API.
///
/// This protocol defines all of the operations supported by the API. It is implemented by ``Client`` which can be used to make these API requests and handle their responses.
///
/// ## Topics
///
/// ### API calls
///
/// These methods allow you to make requests to the API.
///
/// - ``validateApiKey()``
///
/// ### Scoped API calls
///
/// These properties logically group other parts of the API.
///
/// - ``apiEndpoints``
/// - ``apis``
/// - ``embeds``
/// - ``metadata``
/// - ``plugins``
/// - ``requests``
/// - ``schemas``
///
public protocol SpeakeasyAPI {
    /// Validate the current api key.
    /// 
    /// - Returns: A ``Operations/ValidateApiKeyResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func validateApiKey() async throws -> Operations.ValidateApiKeyResponse

    // MARK: - Scoped APIs
    /// REST APIs for managing ApiEndpoint entities
    var apiEndpoints: APIEndpointsAPI { get }
    /// REST APIs for managing Api entities
    var apis: ApisAPI { get }
    /// REST APIs for managing embeds
    var embeds: EmbedsAPI { get }
    /// REST APIs for managing Version Metadata entities
    var metadata: MetadataAPI { get }
    /// REST APIs for managing and running plugins
    var plugins: PluginsAPI { get }
    /// REST APIs for retrieving request information
    var requests: RequestsAPI { get }
    /// REST APIs for managing Schema entities
    var schemas: SchemasAPI { get }
}

// MARK: - APIEndpointsAPI

/// REST APIs for managing ApiEndpoint entities
///
/// ## Topics
///
/// ### API calls
///
/// - ``deleteApiEndpoint(request:)``
/// - ``findApiEndpoint(request:)``
/// - ``generateOpenApiSpecForApiEndpoint(request:)``
/// - ``generatePostmanCollectionForApiEndpoint(request:)``
/// - ``getAllApiEndpoints(request:)``
/// - ``getAllForVersionApiEndpoints(request:)``
/// - ``getApiEndpoint(request:)``
/// - ``upsertApiEndpoint(request:)``
///
public protocol APIEndpointsAPI {
    /// Delete an ApiEndpoint. This will also delete all associated Request Logs (if using a Postgres datastore).
    /// 
    /// - Parameter request: A ``Operations/DeleteApiEndpointRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/DeleteApiEndpointResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func deleteApiEndpoint(request: Operations.DeleteApiEndpointRequest) async throws -> Operations.DeleteApiEndpointResponse

    /// Find an ApiEndpoint via its displayName (set by operationId from a registered OpenAPI schema).
    /// This is useful for finding the ID of an ApiEndpoint to use in the /v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID} endpoints.
    /// 
    /// - Parameter request: A ``Operations/FindApiEndpointRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/FindApiEndpointResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func findApiEndpoint(request: Operations.FindApiEndpointRequest) async throws -> Operations.FindApiEndpointResponse

    /// This endpoint will generate a new operation in any registered OpenAPI document if the operation does not already exist in the document.
    /// Returns the original document and the newly generated document allowing a diff to be performed to see what has changed.
    /// 
    /// - Parameter request: A ``Operations/GenerateOpenApiSpecForApiEndpointRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GenerateOpenApiSpecForApiEndpointResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func generateOpenApiSpecForApiEndpoint(request: Operations.GenerateOpenApiSpecForApiEndpointRequest) async throws -> Operations.GenerateOpenApiSpecForApiEndpointResponse

    /// Generates a postman collection that allows the endpoint to be called from postman variables produced for any path/query/header parameters included in the OpenAPI document.
    /// 
    /// - Parameter request: A ``Operations/GeneratePostmanCollectionForApiEndpointRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GeneratePostmanCollectionForApiEndpointResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func generatePostmanCollectionForApiEndpoint(request: Operations.GeneratePostmanCollectionForApiEndpointRequest) async throws -> Operations.GeneratePostmanCollectionForApiEndpointResponse

    /// Get all Api endpoints for a particular apiID.
    /// 
    /// - Parameter request: A ``Operations/GetAllApiEndpointsRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetAllApiEndpointsResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func getAllApiEndpoints(request: Operations.GetAllApiEndpointsRequest) async throws -> Operations.GetAllApiEndpointsResponse

    /// Get all ApiEndpoints for a particular apiID and versionID.
    /// 
    /// - Parameter request: A ``Operations/GetAllForVersionApiEndpointsRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetAllForVersionApiEndpointsResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func getAllForVersionApiEndpoints(request: Operations.GetAllForVersionApiEndpointsRequest) async throws -> Operations.GetAllForVersionApiEndpointsResponse

    /// Get an ApiEndpoint.
    /// 
    /// - Parameter request: A ``Operations/GetApiEndpointRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetApiEndpointResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func getApiEndpoint(request: Operations.GetApiEndpointRequest) async throws -> Operations.GetApiEndpointResponse

    /// Upsert an ApiEndpoint. If the ApiEndpoint does not exist it will be created, otherwise it will be updated.
    /// 
    /// - Parameter request: A ``Operations/UpsertApiEndpointRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/UpsertApiEndpointResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func upsertApiEndpoint(request: Operations.UpsertApiEndpointRequest) async throws -> Operations.UpsertApiEndpointResponse
}

// MARK: - ApisAPI

/// REST APIs for managing Api entities
///
/// ## Topics
///
/// ### API calls
///
/// - ``deleteApi(request:)``
/// - ``generateOpenApiSpec(request:)``
/// - ``generatePostmanCollection(request:)``
/// - ``getAllApiVersions(request:)``
/// - ``getApis(request:)``
/// - ``upsertApi(request:)``
///
public protocol ApisAPI {
    /// Delete a particular version of an Api. The will also delete all associated ApiEndpoints, Metadata, Schemas & Request Logs (if using a Postgres datastore).
    /// 
    /// - Parameter request: A ``Operations/DeleteApiRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/DeleteApiResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func deleteApi(request: Operations.DeleteApiRequest) async throws -> Operations.DeleteApiResponse

    /// This endpoint will generate any missing operations in any registered OpenAPI document if the operation does not already exist in the document.
    /// Returns the original document and the newly generated document allowing a diff to be performed to see what has changed.
    /// 
    /// - Parameter request: A ``Operations/GenerateOpenApiSpecRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GenerateOpenApiSpecResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func generateOpenApiSpec(request: Operations.GenerateOpenApiSpecRequest) async throws -> Operations.GenerateOpenApiSpecResponse

    /// Generates a postman collection containing all endpoints for a particular API. Includes variables produced for any path/query/header parameters included in the OpenAPI document.
    /// 
    /// - Parameter request: A ``Operations/GeneratePostmanCollectionRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GeneratePostmanCollectionResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func generatePostmanCollection(request: Operations.GeneratePostmanCollectionRequest) async throws -> Operations.GeneratePostmanCollectionResponse

    /// Get all Api versions for a particular ApiEndpoint.
    /// Supports filtering the versions based on metadata attributes.
    /// 
    /// - Parameter request: A ``Operations/GetAllApiVersionsRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetAllApiVersionsResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func getAllApiVersions(request: Operations.GetAllApiVersionsRequest) async throws -> Operations.GetAllApiVersionsResponse

    /// Get a list of all Apis and their versions for a given workspace.
    /// Supports filtering the APIs based on metadata attributes.
    /// 
    /// - Parameter request: A ``Operations/GetApisRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetApisResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func getApis(request: Operations.GetApisRequest) async throws -> Operations.GetApisResponse

    /// Upsert an Api. If the Api does not exist, it will be created.
    /// If the Api exists, it will be updated.
    /// 
    /// - Parameter request: A ``Operations/UpsertApiRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/UpsertApiResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func upsertApi(request: Operations.UpsertApiRequest) async throws -> Operations.UpsertApiResponse
}

// MARK: - EmbedsAPI

/// REST APIs for managing embeds
///
/// ## Topics
///
/// ### API calls
///
/// - ``getEmbedAccessToken(request:)``
/// - ``getValidEmbedAccessTokens()``
/// - ``revokeEmbedAccessToken(request:)``
///
public protocol EmbedsAPI {
    /// Returns an embed access token for the current workspace. This can be used to authenticate access to externally embedded content.
    /// Filters can be applied allowing views to be filtered to things like particular customerIds.
    /// 
    /// - Parameter request: A ``Operations/GetEmbedAccessTokenRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetEmbedAccessTokenResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func getEmbedAccessToken(request: Operations.GetEmbedAccessTokenRequest) async throws -> Operations.GetEmbedAccessTokenResponse

    /// Get all valid embed access tokens for the current workspace.
    /// 
    /// - Returns: A ``Operations/GetValidEmbedAccessTokensResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func getValidEmbedAccessTokens() async throws -> Operations.GetValidEmbedAccessTokensResponse

    /// Revoke an embed access EmbedToken.
    /// 
    /// - Parameter request: A ``Operations/RevokeEmbedAccessTokenRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/RevokeEmbedAccessTokenResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func revokeEmbedAccessToken(request: Operations.RevokeEmbedAccessTokenRequest) async throws -> Operations.RevokeEmbedAccessTokenResponse
}

// MARK: - MetadataAPI

/// REST APIs for managing Version Metadata entities
///
/// ## Topics
///
/// ### API calls
///
/// - ``deleteVersionMetadata(request:)``
/// - ``getVersionMetadata(request:)``
/// - ``insertVersionMetadata(request:)``
///
public protocol MetadataAPI {
    /// Delete metadata for a particular apiID and versionID.
    /// 
    /// - Parameter request: A ``Operations/DeleteVersionMetadataRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/DeleteVersionMetadataResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func deleteVersionMetadata(request: Operations.DeleteVersionMetadataRequest) async throws -> Operations.DeleteVersionMetadataResponse

    /// Get all metadata for a particular apiID and versionID.
    /// 
    /// - Parameter request: A ``Operations/GetVersionMetadataRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetVersionMetadataResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func getVersionMetadata(request: Operations.GetVersionMetadataRequest) async throws -> Operations.GetVersionMetadataResponse

    /// Insert metadata for a particular apiID and versionID.
    /// 
    /// - Parameter request: A ``Operations/InsertVersionMetadataRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/InsertVersionMetadataResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func insertVersionMetadata(request: Operations.InsertVersionMetadataRequest) async throws -> Operations.InsertVersionMetadataResponse
}

// MARK: - PluginsAPI

/// REST APIs for managing and running plugins
///
/// ## Topics
///
/// ### API calls
///
/// - ``getPlugins()``
/// - ``runPlugin(request:)``
/// - ``upsertPlugin(request:)``
///
public protocol PluginsAPI {
    /// Get all plugins for the current workspace.
    /// 
    /// - Returns: A ``Operations/GetPluginsResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func getPlugins() async throws -> Operations.GetPluginsResponse

    /// Run a plugin
    /// 
    /// - Parameter request: A ``Operations/RunPluginRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/RunPluginResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func runPlugin(request: Operations.RunPluginRequest) async throws -> Operations.RunPluginResponse

    /// Upsert a plugin
    /// 
    /// - Parameter request: A ``Shared/Plugin`` object describing the input to the API operation
    /// - Returns: A ``Operations/UpsertPluginResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func upsertPlugin(request: Shared.Plugin) async throws -> Operations.UpsertPluginResponse
}

// MARK: - RequestsAPI

/// REST APIs for retrieving request information
///
/// ## Topics
///
/// ### API calls
///
/// - ``generateRequestPostmanCollection(request:)``
/// - ``getRequestFromEventLog(request:)``
/// - ``queryEventLog(request:)``
///
public protocol RequestsAPI {
    /// Generates a Postman collection for a particular request. 
    /// Allowing it to be replayed with the same inputs that were captured by the SDK.
    /// 
    /// - Parameter request: A ``Operations/GenerateRequestPostmanCollectionRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GenerateRequestPostmanCollectionResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func generateRequestPostmanCollection(request: Operations.GenerateRequestPostmanCollectionRequest) async throws -> Operations.GenerateRequestPostmanCollectionResponse

    /// Get information about a particular request.
    /// 
    /// - Parameter request: A ``Operations/GetRequestFromEventLogRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetRequestFromEventLogResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func getRequestFromEventLog(request: Operations.GetRequestFromEventLogRequest) async throws -> Operations.GetRequestFromEventLogResponse

    /// Supports retrieving a list of request captured by the SDK for this workspace.
    /// Allows the filtering of requests on a number of criteria such as ApiID, VersionID, Path, Method, etc.
    /// 
    /// - Parameter request: A ``Operations/QueryEventLogRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/QueryEventLogResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func queryEventLog(request: Operations.QueryEventLogRequest) async throws -> Operations.QueryEventLogResponse
}

// MARK: - SchemasAPI

/// REST APIs for managing Schema entities
///
/// ## Topics
///
/// ### API calls
///
/// - ``deleteSchema(request:)``
/// - ``downloadSchema(request:)``
/// - ``downloadSchemaRevision(request:)``
/// - ``getSchema(request:)``
/// - ``getSchemaDiff(request:)``
/// - ``getSchemaRevision(request:)``
/// - ``getSchemas(request:)``
/// - ``registerSchema(request:)``
///
public protocol SchemasAPI {
    /// Delete a particular schema revision for an Api.
    /// 
    /// - Parameter request: A ``Operations/DeleteSchemaRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/DeleteSchemaResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func deleteSchema(request: Operations.DeleteSchemaRequest) async throws -> Operations.DeleteSchemaResponse

    /// Download the latest schema for a particular apiID.
    /// 
    /// - Parameter request: A ``Operations/DownloadSchemaRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/DownloadSchemaResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func downloadSchema(request: Operations.DownloadSchemaRequest) async throws -> Operations.DownloadSchemaResponse

    /// Download a particular schema revision for an Api.
    /// 
    /// - Parameter request: A ``Operations/DownloadSchemaRevisionRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/DownloadSchemaRevisionResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func downloadSchemaRevision(request: Operations.DownloadSchemaRevisionRequest) async throws -> Operations.DownloadSchemaRevisionResponse

    /// Returns information about the last uploaded schema for a particular API version. 
    /// This won't include the schema itself, that can be retrieved via the downloadSchema operation.
    /// 
    /// - Parameter request: A ``Operations/GetSchemaRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetSchemaResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func getSchema(request: Operations.GetSchemaRequest) async throws -> Operations.GetSchemaResponse

    /// Get a diff of two schema revisions for an Api.
    /// 
    /// - Parameter request: A ``Operations/GetSchemaDiffRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetSchemaDiffResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func getSchemaDiff(request: Operations.GetSchemaDiffRequest) async throws -> Operations.GetSchemaDiffResponse

    /// Returns information about the last uploaded schema for a particular schema revision. 
    /// This won't include the schema itself, that can be retrieved via the downloadSchema operation.
    /// 
    /// - Parameter request: A ``Operations/GetSchemaRevisionRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetSchemaRevisionResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func getSchemaRevision(request: Operations.GetSchemaRevisionRequest) async throws -> Operations.GetSchemaRevisionResponse

    /// Returns information the schemas associated with a particular apiID. 
    /// This won't include the schemas themselves, they can be retrieved via the downloadSchema operation.
    /// 
    /// - Parameter request: A ``Operations/GetSchemasRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetSchemasResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func getSchemas(request: Operations.GetSchemasRequest) async throws -> Operations.GetSchemasResponse

    /// Allows uploading a schema for a particular API version.
    /// This will be used to populate ApiEndpoints and used as a base for any schema generation if present.
    /// 
    /// - Parameter request: A ``Operations/RegisterSchemaRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/RegisterSchemaResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``SpeakeasyError``
    func registerSchema(request: Operations.RegisterSchemaRequest) async throws -> Operations.RegisterSchemaResponse
}
