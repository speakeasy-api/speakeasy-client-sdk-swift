// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

extension Client: RequestsAPI { 
    public func generateRequestPostmanCollection(request: Operations.GenerateRequestPostmanCollectionRequest) async throws -> Operations.GenerateRequestPostmanCollectionResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureGenerateRequestPostmanCollectionRequest(with: configuration, request: request)
            },
            handleResponse: handleGenerateRequestPostmanCollectionResponse
        )
    }
    public func getRequestFromEventLog(request: Operations.GetRequestFromEventLogRequest) async throws -> Operations.GetRequestFromEventLogResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureGetRequestFromEventLogRequest(with: configuration, request: request)
            },
            handleResponse: handleGetRequestFromEventLogResponse
        )
    }
    public func queryEventLog(request: Operations.QueryEventLogRequest) async throws -> Operations.QueryEventLogResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureQueryEventLogRequest(with: configuration, request: request)
            },
            handleResponse: handleQueryEventLogResponse
        )
    }
}

// MARK: - Request Configuration

private func configureGenerateRequestPostmanCollectionRequest(with configuration: URLRequestConfiguration, request: Operations.GenerateRequestPostmanCollectionRequest) throws {
    configuration.path = "/v1/eventlog/{requestID}/generate/postman"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGetRequestFromEventLogRequest(with configuration: URLRequestConfiguration, request: Operations.GetRequestFromEventLogRequest) throws {
    configuration.path = "/v1/eventlog/{requestID}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureQueryEventLogRequest(with configuration: URLRequestConfiguration, request: Operations.QueryEventLogRequest) throws {
    configuration.path = "/v1/eventlog/query"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleGenerateRequestPostmanCollectionResponse(response: SpeakeasyResponse) throws -> Operations.GenerateRequestPostmanCollectionResponse {
    var responseObject = Operations.GenerateRequestPostmanCollectionResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        if response.contentType.matchContentType(pattern: "application/octet-stream"), let data = response.data {
            responseObject.postmanCollection = data
        }
    } else { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.error = try JSONDecoder().decode(Shared.Error.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleGetRequestFromEventLogResponse(response: SpeakeasyResponse) throws -> Operations.GetRequestFromEventLogResponse {
    var responseObject = Operations.GetRequestFromEventLogResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.unboundedRequest = try JSONDecoder().decode(Shared.UnboundedRequest.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.error = try JSONDecoder().decode(Shared.Error.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleQueryEventLogResponse(response: SpeakeasyResponse) throws -> Operations.QueryEventLogResponse {
    var responseObject = Operations.QueryEventLogResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.boundedRequests = try JSONDecoder().decode([Shared.BoundedRequest].self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.error = try JSONDecoder().decode(Shared.Error.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

