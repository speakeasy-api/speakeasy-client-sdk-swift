// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

extension Client: MetadataAPI { 
    public func deleteVersionMetadata(request: Operations.DeleteVersionMetadataRequest) async throws -> Operations.DeleteVersionMetadataResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureDeleteVersionMetadataRequest(with: configuration, request: request)
            },
            handleResponse: handleDeleteVersionMetadataResponse
        )
    }
    public func getVersionMetadata(request: Operations.GetVersionMetadataRequest) async throws -> Operations.GetVersionMetadataResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureGetVersionMetadataRequest(with: configuration, request: request)
            },
            handleResponse: handleGetVersionMetadataResponse
        )
    }
    public func insertVersionMetadata(request: Operations.InsertVersionMetadataRequest) async throws -> Operations.InsertVersionMetadataResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureInsertVersionMetadataRequest(with: configuration, request: request)
            },
            handleResponse: handleInsertVersionMetadataResponse
        )
    }
}

// MARK: - Request Configuration

private func configureDeleteVersionMetadataRequest(with configuration: URLRequestConfiguration, request: Operations.DeleteVersionMetadataRequest) throws {
    configuration.path = "/v1/apis/{apiID}/version/{versionID}/metadata/{metaKey}/{metaValue}"
    configuration.method = .delete
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGetVersionMetadataRequest(with configuration: URLRequestConfiguration, request: Operations.GetVersionMetadataRequest) throws {
    configuration.path = "/v1/apis/{apiID}/version/{versionID}/metadata"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureInsertVersionMetadataRequest(with configuration: URLRequestConfiguration, request: Operations.InsertVersionMetadataRequest) throws {
    configuration.path = "/v1/apis/{apiID}/version/{versionID}/metadata"
    configuration.method = .post
    configuration.pathParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.versionMetadataInput)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleDeleteVersionMetadataResponse(response: SpeakeasyResponse) throws -> Operations.DeleteVersionMetadataResponse {
    var responseObject = Operations.DeleteVersionMetadataResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
    } else { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.error = try JSONDecoder().decode(Shared.Error.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleGetVersionMetadataResponse(response: SpeakeasyResponse) throws -> Operations.GetVersionMetadataResponse {
    var responseObject = Operations.GetVersionMetadataResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.versionMetadata = try JSONDecoder().decode([Shared.VersionMetadata].self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.error = try JSONDecoder().decode(Shared.Error.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleInsertVersionMetadataResponse(response: SpeakeasyResponse) throws -> Operations.InsertVersionMetadataResponse {
    var responseObject = Operations.InsertVersionMetadataResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.versionMetadata = try JSONDecoder().decode(Shared.VersionMetadata.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.error = try JSONDecoder().decode(Shared.Error.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

