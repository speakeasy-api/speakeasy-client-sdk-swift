// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

extension Client: ApisAPI { 
    public func deleteApi(request: Operations.DeleteApiRequest) async throws -> Response<Operations.DeleteApiResponse> {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureDeleteApiRequest(with: configuration, request: request)
            },
            handleResponse: handleDeleteApiResponse
        )
    }
    public func generateOpenApiSpec(request: Operations.GenerateOpenApiSpecRequest) async throws -> Response<Operations.GenerateOpenApiSpecResponse> {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureGenerateOpenApiSpecRequest(with: configuration, request: request)
            },
            handleResponse: handleGenerateOpenApiSpecResponse
        )
    }
    public func generatePostmanCollection(request: Operations.GeneratePostmanCollectionRequest) async throws -> Response<Operations.GeneratePostmanCollectionResponse> {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureGeneratePostmanCollectionRequest(with: configuration, request: request)
            },
            handleResponse: handleGeneratePostmanCollectionResponse
        )
    }
    public func getAllApiVersions(request: Operations.GetAllApiVersionsRequest) async throws -> Response<Operations.GetAllApiVersionsResponse> {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureGetAllApiVersionsRequest(with: configuration, request: request)
            },
            handleResponse: handleGetAllApiVersionsResponse
        )
    }
    public func getApis(request: Operations.GetApisRequest) async throws -> Response<Operations.GetApisResponse> {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureGetApisRequest(with: configuration, request: request)
            },
            handleResponse: handleGetApisResponse
        )
    }
    public func upsertApi(request: Operations.UpsertApiRequest) async throws -> Response<Operations.UpsertApiResponse> {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureUpsertApiRequest(with: configuration, request: request)
            },
            handleResponse: handleUpsertApiResponse
        )
    }
}

// MARK: - Request Configuration

private func configureDeleteApiRequest(with configuration: URLRequestConfiguration, request: Operations.DeleteApiRequest) throws {
    configuration.path = "/v1/apis/{apiID}/version/{versionID}"
    configuration.method = .delete
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGenerateOpenApiSpecRequest(with configuration: URLRequestConfiguration, request: Operations.GenerateOpenApiSpecRequest) throws {
    configuration.path = "/v1/apis/{apiID}/version/{versionID}/generate/openapi"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGeneratePostmanCollectionRequest(with configuration: URLRequestConfiguration, request: Operations.GeneratePostmanCollectionRequest) throws {
    configuration.path = "/v1/apis/{apiID}/version/{versionID}/generate/postman"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGetAllApiVersionsRequest(with configuration: URLRequestConfiguration, request: Operations.GetAllApiVersionsRequest) throws {
    configuration.path = "/v1/apis/{apiID}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGetApisRequest(with configuration: URLRequestConfiguration, request: Operations.GetApisRequest) throws {
    configuration.path = "/v1/apis"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureUpsertApiRequest(with configuration: URLRequestConfiguration, request: Operations.UpsertApiRequest) throws {
    configuration.path = "/v1/apis/{apiID}"
    configuration.method = .put
    configuration.pathParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.apiInput)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleDeleteApiResponse(response: Client.APIResponse) throws -> Operations.DeleteApiResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
    } else { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .error(try JSONDecoder().decode(Shared.Error.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleGenerateOpenApiSpecResponse(response: Client.APIResponse) throws -> Operations.GenerateOpenApiSpecResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .generateOpenApiSpecDiff(try JSONDecoder().decode(Shared.GenerateOpenApiSpecDiff.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .error(try JSONDecoder().decode(Shared.Error.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleGeneratePostmanCollectionResponse(response: Client.APIResponse) throws -> Operations.GeneratePostmanCollectionResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/octet-stream"), let data = response.data {
            return .postmanCollection(data)
        }
    } else { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .error(try JSONDecoder().decode(Shared.Error.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleGetAllApiVersionsResponse(response: Client.APIResponse) throws -> Operations.GetAllApiVersionsResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .apis(try JSONDecoder().decode([Shared.Api].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .error(try JSONDecoder().decode(Shared.Error.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleGetApisResponse(response: Client.APIResponse) throws -> Operations.GetApisResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .apis(try JSONDecoder().decode([Shared.Api].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .error(try JSONDecoder().decode(Shared.Error.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleUpsertApiResponse(response: Client.APIResponse) throws -> Operations.UpsertApiResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .api(try JSONDecoder().decode(Shared.Api.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .error(try JSONDecoder().decode(Shared.Error.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

