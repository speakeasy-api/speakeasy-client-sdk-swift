// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

extension Client: EmbedsAPI { 
    public func getEmbedAccessToken(request: Operations.GetEmbedAccessTokenRequest) async throws -> Operations.GetEmbedAccessTokenResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureGetEmbedAccessTokenRequest(with: configuration, request: request)
            },
            handleResponse: handleGetEmbedAccessTokenResponse
        )
    }
    public func getValidEmbedAccessTokens() async throws -> Operations.GetValidEmbedAccessTokensResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureGetValidEmbedAccessTokensRequest(with: configuration)
            },
            handleResponse: handleGetValidEmbedAccessTokensResponse
        )
    }
    public func revokeEmbedAccessToken(request: Operations.RevokeEmbedAccessTokenRequest) async throws -> Operations.RevokeEmbedAccessTokenResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureRevokeEmbedAccessTokenRequest(with: configuration, request: request)
            },
            handleResponse: handleRevokeEmbedAccessTokenResponse
        )
    }
}

// MARK: - Request Configuration

private func configureGetEmbedAccessTokenRequest(with configuration: URLRequestConfiguration, request: Operations.GetEmbedAccessTokenRequest) throws {
    configuration.path = "/v1/workspace/embed-access-token"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGetValidEmbedAccessTokensRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/v1/workspace/embed-access-tokens/valid"
    configuration.method = .get
    configuration.telemetryHeader = .userAgent
}

private func configureRevokeEmbedAccessTokenRequest(with configuration: URLRequestConfiguration, request: Operations.RevokeEmbedAccessTokenRequest) throws {
    configuration.path = "/v1/workspace/embed-access-tokens/{tokenID}"
    configuration.method = .delete
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleGetEmbedAccessTokenResponse(response: SpeakeasyResponse) throws -> Operations.GetEmbedAccessTokenResponse {
    var responseObject = Operations.GetEmbedAccessTokenResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.embedAccessTokenResponse = try JSONDecoder().decode(Shared.EmbedAccessTokenResponse.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.error = try JSONDecoder().decode(Shared.Error.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleGetValidEmbedAccessTokensResponse(response: SpeakeasyResponse) throws -> Operations.GetValidEmbedAccessTokensResponse {
    var responseObject = Operations.GetValidEmbedAccessTokensResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.embedTokens = try JSONDecoder().decode([Shared.EmbedToken].self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.error = try JSONDecoder().decode(Shared.Error.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleRevokeEmbedAccessTokenResponse(response: SpeakeasyResponse) throws -> Operations.RevokeEmbedAccessTokenResponse {
    var responseObject = Operations.RevokeEmbedAccessTokenResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
    } else { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.error = try JSONDecoder().decode(Shared.Error.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

