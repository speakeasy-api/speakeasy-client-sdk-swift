// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

extension Client: APIEndpointsAPI { 
    public func deleteApiEndpoint(request: Operations.DeleteApiEndpointRequest) async throws -> Operations.DeleteApiEndpointResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureDeleteApiEndpointRequest(with: configuration, request: request)
            },
            handleResponse: handleDeleteApiEndpointResponse
        )
    }
    public func findApiEndpoint(request: Operations.FindApiEndpointRequest) async throws -> Operations.FindApiEndpointResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureFindApiEndpointRequest(with: configuration, request: request)
            },
            handleResponse: handleFindApiEndpointResponse
        )
    }
    public func generateOpenApiSpecForApiEndpoint(request: Operations.GenerateOpenApiSpecForApiEndpointRequest) async throws -> Operations.GenerateOpenApiSpecForApiEndpointResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureGenerateOpenApiSpecForApiEndpointRequest(with: configuration, request: request)
            },
            handleResponse: handleGenerateOpenApiSpecForApiEndpointResponse
        )
    }
    public func generatePostmanCollectionForApiEndpoint(request: Operations.GeneratePostmanCollectionForApiEndpointRequest) async throws -> Operations.GeneratePostmanCollectionForApiEndpointResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureGeneratePostmanCollectionForApiEndpointRequest(with: configuration, request: request)
            },
            handleResponse: handleGeneratePostmanCollectionForApiEndpointResponse
        )
    }
    public func getAllApiEndpoints(request: Operations.GetAllApiEndpointsRequest) async throws -> Operations.GetAllApiEndpointsResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureGetAllApiEndpointsRequest(with: configuration, request: request)
            },
            handleResponse: handleGetAllApiEndpointsResponse
        )
    }
    public func getAllForVersionApiEndpoints(request: Operations.GetAllForVersionApiEndpointsRequest) async throws -> Operations.GetAllForVersionApiEndpointsResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureGetAllForVersionApiEndpointsRequest(with: configuration, request: request)
            },
            handleResponse: handleGetAllForVersionApiEndpointsResponse
        )
    }
    public func getApiEndpoint(request: Operations.GetApiEndpointRequest) async throws -> Operations.GetApiEndpointResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureGetApiEndpointRequest(with: configuration, request: request)
            },
            handleResponse: handleGetApiEndpointResponse
        )
    }
    public func upsertApiEndpoint(request: Operations.UpsertApiEndpointRequest) async throws -> Operations.UpsertApiEndpointResponse {
        return try await makeRequest(
            configureRequest: { configuration in
                try configureUpsertApiEndpointRequest(with: configuration, request: request)
            },
            handleResponse: handleUpsertApiEndpointResponse
        )
    }
}

// MARK: - Request Configuration

private func configureDeleteApiEndpointRequest(with configuration: URLRequestConfiguration, request: Operations.DeleteApiEndpointRequest) throws {
    configuration.path = "/v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}"
    configuration.method = .delete
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureFindApiEndpointRequest(with configuration: URLRequestConfiguration, request: Operations.FindApiEndpointRequest) throws {
    configuration.path = "/v1/apis/{apiID}/version/{versionID}/api_endpoints/find/{displayName}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGenerateOpenApiSpecForApiEndpointRequest(with configuration: URLRequestConfiguration, request: Operations.GenerateOpenApiSpecForApiEndpointRequest) throws {
    configuration.path = "/v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}/generate/openapi"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGeneratePostmanCollectionForApiEndpointRequest(with configuration: URLRequestConfiguration, request: Operations.GeneratePostmanCollectionForApiEndpointRequest) throws {
    configuration.path = "/v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}/generate/postman"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGetAllApiEndpointsRequest(with configuration: URLRequestConfiguration, request: Operations.GetAllApiEndpointsRequest) throws {
    configuration.path = "/v1/apis/{apiID}/api_endpoints"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGetAllForVersionApiEndpointsRequest(with configuration: URLRequestConfiguration, request: Operations.GetAllForVersionApiEndpointsRequest) throws {
    configuration.path = "/v1/apis/{apiID}/version/{versionID}/api_endpoints"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGetApiEndpointRequest(with configuration: URLRequestConfiguration, request: Operations.GetApiEndpointRequest) throws {
    configuration.path = "/v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureUpsertApiEndpointRequest(with configuration: URLRequestConfiguration, request: Operations.UpsertApiEndpointRequest) throws {
    configuration.path = "/v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}"
    configuration.method = .put
    configuration.pathParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.apiEndpointInput)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleDeleteApiEndpointResponse(response: SpeakeasyResponse) throws -> Operations.DeleteApiEndpointResponse {
    var responseObject = Operations.DeleteApiEndpointResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
    } else { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.error = try JSONDecoder().decode(Shared.Error.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleFindApiEndpointResponse(response: SpeakeasyResponse) throws -> Operations.FindApiEndpointResponse {
    var responseObject = Operations.FindApiEndpointResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.apiEndpoint = try JSONDecoder().decode(Shared.ApiEndpoint.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.error = try JSONDecoder().decode(Shared.Error.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleGenerateOpenApiSpecForApiEndpointResponse(response: SpeakeasyResponse) throws -> Operations.GenerateOpenApiSpecForApiEndpointResponse {
    var responseObject = Operations.GenerateOpenApiSpecForApiEndpointResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.generateOpenApiSpecDiff = try JSONDecoder().decode(Shared.GenerateOpenApiSpecDiff.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.error = try JSONDecoder().decode(Shared.Error.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleGeneratePostmanCollectionForApiEndpointResponse(response: SpeakeasyResponse) throws -> Operations.GeneratePostmanCollectionForApiEndpointResponse {
    var responseObject = Operations.GeneratePostmanCollectionForApiEndpointResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        if response.contentType.matchContentType(pattern: "application/octet-stream"), let data = response.data {
            responseObject.postmanCollection = data
        }
    } else { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.error = try JSONDecoder().decode(Shared.Error.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleGetAllApiEndpointsResponse(response: SpeakeasyResponse) throws -> Operations.GetAllApiEndpointsResponse {
    var responseObject = Operations.GetAllApiEndpointsResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.apiEndpoints = try JSONDecoder().decode([Shared.ApiEndpoint].self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.error = try JSONDecoder().decode(Shared.Error.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleGetAllForVersionApiEndpointsResponse(response: SpeakeasyResponse) throws -> Operations.GetAllForVersionApiEndpointsResponse {
    var responseObject = Operations.GetAllForVersionApiEndpointsResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.apiEndpoints = try JSONDecoder().decode([Shared.ApiEndpoint].self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.error = try JSONDecoder().decode(Shared.Error.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleGetApiEndpointResponse(response: SpeakeasyResponse) throws -> Operations.GetApiEndpointResponse {
    var responseObject = Operations.GetApiEndpointResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.apiEndpoint = try JSONDecoder().decode(Shared.ApiEndpoint.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.error = try JSONDecoder().decode(Shared.Error.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

private func handleUpsertApiEndpointResponse(response: SpeakeasyResponse) throws -> Operations.UpsertApiEndpointResponse {
    var responseObject = Operations.UpsertApiEndpointResponse(
        contentType: response.contentType,
        statusCode: response.statusCode,
        rawResponse: response.httpResponse
    )
    
    if responseObject.statusCode == 200 { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.apiEndpoint = try JSONDecoder().decode(Shared.ApiEndpoint.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else { 
        if response.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                responseObject.error = try JSONDecoder().decode(Shared.Error.self, from: data)
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return responseObject
}

