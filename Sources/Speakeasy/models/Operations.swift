// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation
#if os(Linux)
import FoundationNetworking
#endif

/// Top-level type used for grouping operations models
///
/// > Note: You do not need to interact with this type directly.
public struct Operations {
    private init() {}

    /// A response model
    public enum ValidateApiKeyResponse {
        case empty
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct DeleteApiEndpointRequest: APIValue {
            /// The ID of the ApiEndpoint to delete.
        public let apiEndpointID: String
            /// The ID of the Api the ApiEndpoint belongs to.
        public let apiID: String
            /// The version ID of the Api the ApiEndpoint belongs to.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiEndpointID: The ID of the ApiEndpoint to delete.
        /// - Parameter apiID: The ID of the Api the ApiEndpoint belongs to.
        /// - Parameter versionID: The version ID of the Api the ApiEndpoint belongs to.
        ///
        public init(apiEndpointID: String, apiID: String, versionID: String) {
            self.apiEndpointID = apiEndpointID
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public enum DeleteApiEndpointResponse {
        case empty
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct FindApiEndpointRequest: APIValue {
            /// The ID of the Api the ApiEndpoint belongs to.
        public let apiID: String
            /// The displayName of the ApiEndpoint to find (set by operationId from OpenAPI schema).
        public let displayName: String
            /// The version ID of the Api the ApiEndpoint belongs to.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api the ApiEndpoint belongs to.
        /// - Parameter displayName: The displayName of the ApiEndpoint to find (set by operationId from OpenAPI schema).
        /// - Parameter versionID: The version ID of the Api the ApiEndpoint belongs to.
        ///
        public init(apiID: String, displayName: String, versionID: String) {
            self.apiID = apiID
            self.displayName = displayName
            self.versionID = versionID
        }
    }

    /// A response model
    public enum FindApiEndpointResponse {
        case empty
        case apiEndpoint(Shared.ApiEndpoint)
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func apiEndpoint() throws -> Shared.ApiEndpoint {
            guard case .apiEndpoint(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct GenerateOpenApiSpecForApiEndpointRequest: APIValue {
            /// The ID of the ApiEndpoint to generate an OpenAPI specification for.
        public let apiEndpointID: String
            /// The ID of the Api to generate an OpenAPI specification for.
        public let apiID: String
            /// The version ID of the Api to generate an OpenAPI specification for.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiEndpointID: The ID of the ApiEndpoint to generate an OpenAPI specification for.
        /// - Parameter apiID: The ID of the Api to generate an OpenAPI specification for.
        /// - Parameter versionID: The version ID of the Api to generate an OpenAPI specification for.
        ///
        public init(apiEndpointID: String, apiID: String, versionID: String) {
            self.apiEndpointID = apiEndpointID
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public enum GenerateOpenApiSpecForApiEndpointResponse {
        case empty
        case error(Shared.Error)
        case generateOpenApiSpecDiff(Shared.GenerateOpenApiSpecDiff)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func generateOpenApiSpecDiff() throws -> Shared.GenerateOpenApiSpecDiff {
            guard case .generateOpenApiSpecDiff(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct GeneratePostmanCollectionForApiEndpointRequest: APIValue {
            /// The ID of the ApiEndpoint to generate a Postman collection for.
        public let apiEndpointID: String
            /// The ID of the Api to generate a Postman collection for.
        public let apiID: String
            /// The version ID of the Api to generate a Postman collection for.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiEndpointID: The ID of the ApiEndpoint to generate a Postman collection for.
        /// - Parameter apiID: The ID of the Api to generate a Postman collection for.
        /// - Parameter versionID: The version ID of the Api to generate a Postman collection for.
        ///
        public init(apiEndpointID: String, apiID: String, versionID: String) {
            self.apiEndpointID = apiEndpointID
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public enum GeneratePostmanCollectionForApiEndpointResponse {
        case empty
        case error(Shared.Error)
        case postmanCollection(Data)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func postmanCollection() throws -> Data {
            guard case .postmanCollection(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct GetAllApiEndpointsRequest: APIValue {
            /// The ID of the Api to retrieve ApiEndpoints for.
        public let apiID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to retrieve ApiEndpoints for.
        ///
        public init(apiID: String) {
            self.apiID = apiID
        }
    }

    /// A response model
    public enum GetAllApiEndpointsResponse {
        case empty
        case apiEndpoints([Shared.ApiEndpoint])
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func apiEndpoints() throws -> [Shared.ApiEndpoint] {
            guard case .apiEndpoints(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct GetAllForVersionApiEndpointsRequest: APIValue {
            /// The ID of the Api to retrieve ApiEndpoints for.
        public let apiID: String
            /// The version ID of the Api to retrieve ApiEndpoints for.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to retrieve ApiEndpoints for.
        /// - Parameter versionID: The version ID of the Api to retrieve ApiEndpoints for.
        ///
        public init(apiID: String, versionID: String) {
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public enum GetAllForVersionApiEndpointsResponse {
        case empty
        case apiEndpoints([Shared.ApiEndpoint])
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func apiEndpoints() throws -> [Shared.ApiEndpoint] {
            guard case .apiEndpoints(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct GetApiEndpointRequest: APIValue {
            /// The ID of the ApiEndpoint to retrieve.
        public let apiEndpointID: String
            /// The ID of the Api the ApiEndpoint belongs to.
        public let apiID: String
            /// The version ID of the Api the ApiEndpoint belongs to.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiEndpointID: The ID of the ApiEndpoint to retrieve.
        /// - Parameter apiID: The ID of the Api the ApiEndpoint belongs to.
        /// - Parameter versionID: The version ID of the Api the ApiEndpoint belongs to.
        ///
        public init(apiEndpointID: String, apiID: String, versionID: String) {
            self.apiEndpointID = apiEndpointID
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public enum GetApiEndpointResponse {
        case empty
        case apiEndpoint(Shared.ApiEndpoint)
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func apiEndpoint() throws -> Shared.ApiEndpoint {
            guard case .apiEndpoint(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct UpsertApiEndpointRequest: APIValue {
            /// The ID of the ApiEndpoint to upsert.
        public let apiEndpointID: String
            /// A JSON representation of the ApiEndpoint to upsert.
        public let apiEndpointInput: Shared.ApiEndpointInput
            /// The ID of the Api the ApiEndpoint belongs to.
        public let apiID: String
            /// The version ID of the Api the ApiEndpoint belongs to.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiEndpointID: The ID of the ApiEndpoint to upsert.
        /// - Parameter apiEndpointInput: A JSON representation of the ApiEndpoint to upsert.
        /// - Parameter apiID: The ID of the Api the ApiEndpoint belongs to.
        /// - Parameter versionID: The version ID of the Api the ApiEndpoint belongs to.
        ///
        public init(apiEndpointID: String, apiEndpointInput: Shared.ApiEndpointInput, apiID: String, versionID: String) {
            self.apiEndpointID = apiEndpointID
            self.apiEndpointInput = apiEndpointInput
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public enum UpsertApiEndpointResponse {
        case empty
        case apiEndpoint(Shared.ApiEndpoint)
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func apiEndpoint() throws -> Shared.ApiEndpoint {
            guard case .apiEndpoint(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct DeleteApiRequest: APIValue {
            /// The ID of the Api to delete.
        public let apiID: String
            /// The version ID of the Api to delete.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to delete.
        /// - Parameter versionID: The version ID of the Api to delete.
        ///
        public init(apiID: String, versionID: String) {
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public enum DeleteApiResponse {
        case empty
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct GenerateOpenApiSpecRequest: APIValue {
            /// The ID of the Api to generate an OpenAPI specification for.
        public let apiID: String
            /// The version ID of the Api to generate an OpenAPI specification for.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to generate an OpenAPI specification for.
        /// - Parameter versionID: The version ID of the Api to generate an OpenAPI specification for.
        ///
        public init(apiID: String, versionID: String) {
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public enum GenerateOpenApiSpecResponse {
        case empty
        case error(Shared.Error)
        case generateOpenApiSpecDiff(Shared.GenerateOpenApiSpecDiff)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func generateOpenApiSpecDiff() throws -> Shared.GenerateOpenApiSpecDiff {
            guard case .generateOpenApiSpecDiff(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct GeneratePostmanCollectionRequest: APIValue {
            /// The ID of the Api to generate a Postman collection for.
        public let apiID: String
            /// The version ID of the Api to generate a Postman collection for.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to generate a Postman collection for.
        /// - Parameter versionID: The version ID of the Api to generate a Postman collection for.
        ///
        public init(apiID: String, versionID: String) {
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public enum GeneratePostmanCollectionResponse {
        case empty
        case error(Shared.Error)
        case postmanCollection(Data)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func postmanCollection() throws -> Data {
            guard case .postmanCollection(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// Configuration for filter operations
    public struct GetAllApiVersionsOp: APIValue {
            /// Whether to AND or OR the filters
        public let and: Bool


        /// Creates an object with the specified parameters
        ///
        /// - Parameter and: Whether to AND or OR the filters
        ///
        public init(and: Bool) {
            self.and = and
        }
    }

    /// A request model
    public struct GetAllApiVersionsRequest: APIValue {
            /// The ID of the Api to retrieve.
        public let apiID: String
            /// Metadata to filter Apis on
        public let metadata: [String: [String]]?
            /// Configuration for filter operations
        public let op: Operations.GetAllApiVersionsOp?


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to retrieve.
        /// - Parameter metadata: Metadata to filter Apis on
        /// - Parameter op: Configuration for filter operations
        ///
        public init(apiID: String, metadata: [String: [String]]? = nil, op: Operations.GetAllApiVersionsOp? = nil) {
            self.apiID = apiID
            self.metadata = metadata
            self.op = op
        }
    }

    /// A response model
    public enum GetAllApiVersionsResponse {
        case empty
        case apis([Shared.Api])
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func apis() throws -> [Shared.Api] {
            guard case .apis(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// Configuration for filter operations
    public struct GetApisOp: APIValue {
            /// Whether to AND or OR the filters
        public let and: Bool


        /// Creates an object with the specified parameters
        ///
        /// - Parameter and: Whether to AND or OR the filters
        ///
        public init(and: Bool) {
            self.and = and
        }
    }

    /// A request model
    public struct GetApisRequest: APIValue {
            /// Metadata to filter Apis on
        public let metadata: [String: [String]]?
            /// Configuration for filter operations
        public let op: Operations.GetApisOp?


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter metadata: Metadata to filter Apis on
        /// - Parameter op: Configuration for filter operations
        ///
        public init(metadata: [String: [String]]? = nil, op: Operations.GetApisOp? = nil) {
            self.metadata = metadata
            self.op = op
        }
    }

    /// A response model
    public enum GetApisResponse {
        case empty
        case apis([Shared.Api])
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func apis() throws -> [Shared.Api] {
            guard case .apis(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct UpsertApiRequest: APIValue {
            /// The ID of the Api to upsert.
        public let apiID: String
            /// A JSON representation of the Api to upsert
        public let apiInput: Shared.ApiInput


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to upsert.
        /// - Parameter apiInput: A JSON representation of the Api to upsert
        ///
        public init(apiID: String, apiInput: Shared.ApiInput) {
            self.apiID = apiID
            self.apiInput = apiInput
        }
    }

    /// A response model
    public enum UpsertApiResponse {
        case empty
        case api(Shared.Api)
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func api() throws -> Shared.Api {
            guard case .api(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct GetEmbedAccessTokenRequest: APIValue {
            /// The description of the embed access token.
        public let description: String?
            /// The duration (in minutes) of the embed access token.
        public let duration: Int?
            /// The filter to apply to the query.
        public let filters: Shared.Filters?


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter description: The description of the embed access token.
        /// - Parameter duration: The duration (in minutes) of the embed access token.
        /// - Parameter filters: The filter to apply to the query.
        ///
        public init(description: String? = nil, duration: Int? = nil, filters: Shared.Filters? = nil) {
            self.description = description
            self.duration = duration
            self.filters = filters
        }
    }

    /// A response model
    public enum GetEmbedAccessTokenResponse {
        case empty
        case embedAccessTokenResponse(Shared.EmbedAccessTokenResponse)
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func embedAccessTokenResponse() throws -> Shared.EmbedAccessTokenResponse {
            guard case .embedAccessTokenResponse(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A response model
    public enum GetValidEmbedAccessTokensResponse {
        case empty
        case embedTokens([Shared.EmbedToken])
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func embedTokens() throws -> [Shared.EmbedToken] {
            guard case .embedTokens(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct RevokeEmbedAccessTokenRequest: APIValue {
            /// The ID of the EmbedToken to revoke.
        public let tokenID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter tokenID: The ID of the EmbedToken to revoke.
        ///
        public init(tokenID: String) {
            self.tokenID = tokenID
        }
    }

    /// A response model
    public enum RevokeEmbedAccessTokenResponse {
        case empty
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct DeleteVersionMetadataRequest: APIValue {
            /// The ID of the Api to delete metadata for.
        public let apiID: String
            /// The key of the metadata to delete.
        public let metaKey: String
            /// The value of the metadata to delete.
        public let metaValue: String
            /// The version ID of the Api to delete metadata for.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to delete metadata for.
        /// - Parameter metaKey: The key of the metadata to delete.
        /// - Parameter metaValue: The value of the metadata to delete.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, metaKey: String, metaValue: String, versionID: String) {
            self.apiID = apiID
            self.metaKey = metaKey
            self.metaValue = metaValue
            self.versionID = versionID
        }
    }

    /// A response model
    public enum DeleteVersionMetadataResponse {
        case empty
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct GetVersionMetadataRequest: APIValue {
            /// The ID of the Api to retrieve metadata for.
        public let apiID: String
            /// The version ID of the Api to retrieve metadata for.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to retrieve metadata for.
        /// - Parameter versionID: The version ID of the Api to retrieve metadata for.
        ///
        public init(apiID: String, versionID: String) {
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public enum GetVersionMetadataResponse {
        case empty
        case error(Shared.Error)
        case versionMetadata([Shared.VersionMetadata])

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func versionMetadata() throws -> [Shared.VersionMetadata] {
            guard case .versionMetadata(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct InsertVersionMetadataRequest: APIValue {
            /// The ID of the Api to insert metadata for.
        public let apiID: String
            /// The version ID of the Api to insert metadata for.
        public let versionID: String
            /// A JSON representation of the metadata to insert.
        public let versionMetadataInput: Shared.VersionMetadataInput


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to insert metadata for.
        /// - Parameter versionID: The version ID of the Api to insert metadata for.
        /// - Parameter versionMetadataInput: A JSON representation of the metadata to insert.
        ///
        public init(apiID: String, versionID: String, versionMetadataInput: Shared.VersionMetadataInput) {
            self.apiID = apiID
            self.versionID = versionID
            self.versionMetadataInput = versionMetadataInput
        }
    }

    /// A response model
    public enum InsertVersionMetadataResponse {
        case empty
        case error(Shared.Error)
        case versionMetadata(Shared.VersionMetadata)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func versionMetadata() throws -> Shared.VersionMetadata {
            guard case .versionMetadata(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A response model
    public enum GetPluginsResponse {
        case empty
        case error(Shared.Error)
        case plugins([Shared.Plugin])

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func plugins() throws -> [Shared.Plugin] {
            guard case .plugins(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct RunPluginRequest: APIValue {
            /// The ID of the plugin to run.
        public let pluginID: String
            /// The filter to apply to the query.
        public let filters: Shared.Filters?


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter pluginID: The ID of the plugin to run.
        /// - Parameter filters: The filter to apply to the query.
        ///
        public init(pluginID: String, filters: Shared.Filters? = nil) {
            self.pluginID = pluginID
            self.filters = filters
        }
    }

    /// A response model
    public enum RunPluginResponse {
        case empty
        case boundedRequests([Shared.BoundedRequest])
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func boundedRequests() throws -> [Shared.BoundedRequest] {
            guard case .boundedRequests(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A response model
    public enum UpsertPluginResponse {
        case empty
        case error(Shared.Error)
        case plugin(Shared.Plugin)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func plugin() throws -> Shared.Plugin {
            guard case .plugin(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct GenerateRequestPostmanCollectionRequest: APIValue {
            /// The ID of the request to retrieve.
        public let requestID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter requestID: The ID of the request to retrieve.
        ///
        public init(requestID: String) {
            self.requestID = requestID
        }
    }

    /// A response model
    public enum GenerateRequestPostmanCollectionResponse {
        case empty
        case error(Shared.Error)
        case postmanCollection(Data)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func postmanCollection() throws -> Data {
            guard case .postmanCollection(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct GetRequestFromEventLogRequest: APIValue {
            /// The ID of the request to retrieve.
        public let requestID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter requestID: The ID of the request to retrieve.
        ///
        public init(requestID: String) {
            self.requestID = requestID
        }
    }

    /// A response model
    public enum GetRequestFromEventLogResponse {
        case empty
        case error(Shared.Error)
        case unboundedRequest(Shared.UnboundedRequest)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func unboundedRequest() throws -> Shared.UnboundedRequest {
            guard case .unboundedRequest(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct QueryEventLogRequest: APIValue {
            /// The filter to apply to the query.
        public let filters: Shared.Filters?


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter filters: The filter to apply to the query.
        ///
        public init(filters: Shared.Filters? = nil) {
            self.filters = filters
        }
    }

    /// A response model
    public enum QueryEventLogResponse {
        case empty
        case boundedRequests([Shared.BoundedRequest])
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func boundedRequests() throws -> [Shared.BoundedRequest] {
            guard case .boundedRequests(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct DeleteSchemaRequest: APIValue {
            /// The ID of the Api to delete schemas for.
        public let apiID: String
            /// The revision ID of the schema to delete.
        public let revisionID: String
            /// The version ID of the Api to delete metadata for.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to delete schemas for.
        /// - Parameter revisionID: The revision ID of the schema to delete.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, revisionID: String, versionID: String) {
            self.apiID = apiID
            self.revisionID = revisionID
            self.versionID = versionID
        }
    }

    /// A response model
    public enum DeleteSchemaResponse {
        case empty
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct DownloadSchemaRequest: APIValue {
            /// The ID of the Api to download the schema for.
        public let apiID: String
            /// The version ID of the Api to delete metadata for.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to download the schema for.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, versionID: String) {
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public enum DownloadSchemaResponse {
        case empty
        case error(Shared.Error)
        case schema(Data)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func schema() throws -> Data {
            guard case .schema(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct DownloadSchemaRevisionRequest: APIValue {
            /// The ID of the Api to retrieve schemas for.
        public let apiID: String
            /// The revision ID of the schema to retrieve.
        public let revisionID: String
            /// The version ID of the Api to delete metadata for.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to retrieve schemas for.
        /// - Parameter revisionID: The revision ID of the schema to retrieve.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, revisionID: String, versionID: String) {
            self.apiID = apiID
            self.revisionID = revisionID
            self.versionID = versionID
        }
    }

    /// A response model
    public enum DownloadSchemaRevisionResponse {
        case empty
        case error(Shared.Error)
        case schema(Data)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func schema() throws -> Data {
            guard case .schema(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct GetSchemaRequest: APIValue {
            /// The ID of the Api to get the schema for.
        public let apiID: String
            /// The version ID of the Api to delete metadata for.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to get the schema for.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, versionID: String) {
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public enum GetSchemaResponse {
        case empty
        case error(Shared.Error)
        case schema(Shared.Schema)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func schema() throws -> Shared.Schema {
            guard case .schema(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct GetSchemaDiffRequest: APIValue {
            /// The ID of the Api to retrieve schemas for.
        public let apiID: String
            /// The base revision ID of the schema to retrieve.
        public let baseRevisionID: String
            /// The target revision ID of the schema to retrieve.
        public let targetRevisionID: String
            /// The version ID of the Api to delete metadata for.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to retrieve schemas for.
        /// - Parameter baseRevisionID: The base revision ID of the schema to retrieve.
        /// - Parameter targetRevisionID: The target revision ID of the schema to retrieve.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, baseRevisionID: String, targetRevisionID: String, versionID: String) {
            self.apiID = apiID
            self.baseRevisionID = baseRevisionID
            self.targetRevisionID = targetRevisionID
            self.versionID = versionID
        }
    }

    /// A response model
    public enum GetSchemaDiffResponse {
        case empty
        case error(Shared.Error)
        case schemaDiff(Shared.SchemaDiff)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func schemaDiff() throws -> Shared.SchemaDiff {
            guard case .schemaDiff(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct GetSchemaRevisionRequest: APIValue {
            /// The ID of the Api to retrieve schemas for.
        public let apiID: String
            /// The revision ID of the schema to retrieve.
        public let revisionID: String
            /// The version ID of the Api to delete metadata for.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to retrieve schemas for.
        /// - Parameter revisionID: The revision ID of the schema to retrieve.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, revisionID: String, versionID: String) {
            self.apiID = apiID
            self.revisionID = revisionID
            self.versionID = versionID
        }
    }

    /// A response model
    public enum GetSchemaRevisionResponse {
        case empty
        case error(Shared.Error)
        case schema(Shared.Schema)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func schema() throws -> Shared.Schema {
            guard case .schema(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A request model
    public struct GetSchemasRequest: APIValue {
            /// The ID of the Api to retrieve schemas for.
        public let apiID: String
            /// The version ID of the Api to delete metadata for.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to retrieve schemas for.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, versionID: String) {
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public enum GetSchemasResponse {
        case empty
        case error(Shared.Error)
        case schemata([Shared.Schema])

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }

        public func schemata() throws -> [Shared.Schema] {
            guard case .schemata(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

    /// A model object
    public struct RegisterSchemaRequestBodyFile: APIValue {
        public let content: Data
        public let file: String


        /// Creates an object with the specified parameters
        ///
        ///
        public init(content: Data, file: String) {
            self.content = content
            self.file = file
        }
    }

    /// The schema file to upload provided as a multipart/form-data file segment.
    public struct RegisterSchemaRequestBody: APIValue {
        public let file: Operations.RegisterSchemaRequestBodyFile


        /// Creates an object with the specified parameters
        ///
        ///
        public init(file: Operations.RegisterSchemaRequestBodyFile) {
            self.file = file
        }
    }

    /// A request model
    public struct RegisterSchemaRequest: APIValue {
            /// The ID of the Api to get the schema for.
        public let apiID: String
            /// The schema file to upload provided as a multipart/form-data file segment.
        public let requestBody: Operations.RegisterSchemaRequestBody
            /// The version ID of the Api to delete metadata for.
        public let versionID: String


        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to get the schema for.
        /// - Parameter requestBody: The schema file to upload provided as a multipart/form-data file segment.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, requestBody: Operations.RegisterSchemaRequestBody, versionID: String) {
            self.apiID = apiID
            self.requestBody = requestBody
            self.versionID = versionID
        }
    }

    /// A response model
    public enum RegisterSchemaResponse {
        case empty
        case error(Shared.Error)

        var isEmpty: Bool {
            if case .empty = self {
                return true
            } else {
                return false
            }
        }

        public func error() throws -> Shared.Error {
            guard case .error(let value) = self else {
                throw SpeakeasyError.missingResponseData
            }
            return value
        }
    }

}