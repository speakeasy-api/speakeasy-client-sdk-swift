// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

/// Top-level type used for grouping operations models
///
/// > Note: You do not need to interact with this type directly.
public struct Operations {
    private init() {}

    /// A response model
    public struct ValidateApiKeyResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct DeleteApiEndpointRequest: APIValue {
            /// The ID of the ApiEndpoint to delete.
        public let apiEndpointID: String
            /// The ID of the Api the ApiEndpoint belongs to.
        public let apiID: String
            /// The version ID of the Api the ApiEndpoint belongs to.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiEndpointID: The ID of the ApiEndpoint to delete.
        /// - Parameter apiID: The ID of the Api the ApiEndpoint belongs to.
        /// - Parameter versionID: The version ID of the Api the ApiEndpoint belongs to.
        ///
        public init(apiEndpointID: String, apiID: String, versionID: String) {
            self.apiEndpointID = apiEndpointID
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public struct DeleteApiEndpointResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct FindApiEndpointRequest: APIValue {
            /// The ID of the Api the ApiEndpoint belongs to.
        public let apiID: String
            /// The displayName of the ApiEndpoint to find (set by operationId from OpenAPI schema).
        public let displayName: String
            /// The version ID of the Api the ApiEndpoint belongs to.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api the ApiEndpoint belongs to.
        /// - Parameter displayName: The displayName of the ApiEndpoint to find (set by operationId from OpenAPI schema).
        /// - Parameter versionID: The version ID of the Api the ApiEndpoint belongs to.
        ///
        public init(apiID: String, displayName: String, versionID: String) {
            self.apiID = apiID
            self.displayName = displayName
            self.versionID = versionID
        }
    }

    /// A response model
    public struct FindApiEndpointResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// OK
        public internal(set) var apiEndpoint: Shared.ApiEndpoint?
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct GenerateOpenApiSpecForApiEndpointRequest: APIValue {
            /// The ID of the ApiEndpoint to generate an OpenAPI specification for.
        public let apiEndpointID: String
            /// The ID of the Api to generate an OpenAPI specification for.
        public let apiID: String
            /// The version ID of the Api to generate an OpenAPI specification for.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiEndpointID: The ID of the ApiEndpoint to generate an OpenAPI specification for.
        /// - Parameter apiID: The ID of the Api to generate an OpenAPI specification for.
        /// - Parameter versionID: The version ID of the Api to generate an OpenAPI specification for.
        ///
        public init(apiEndpointID: String, apiID: String, versionID: String) {
            self.apiEndpointID = apiEndpointID
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public struct GenerateOpenApiSpecForApiEndpointResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
            /// OK
        public internal(set) var generateOpenApiSpecDiff: Shared.GenerateOpenApiSpecDiff?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct GeneratePostmanCollectionForApiEndpointRequest: APIValue {
            /// The ID of the ApiEndpoint to generate a Postman collection for.
        public let apiEndpointID: String
            /// The ID of the Api to generate a Postman collection for.
        public let apiID: String
            /// The version ID of the Api to generate a Postman collection for.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiEndpointID: The ID of the ApiEndpoint to generate a Postman collection for.
        /// - Parameter apiID: The ID of the Api to generate a Postman collection for.
        /// - Parameter versionID: The version ID of the Api to generate a Postman collection for.
        ///
        public init(apiEndpointID: String, apiID: String, versionID: String) {
            self.apiEndpointID = apiEndpointID
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public struct GeneratePostmanCollectionForApiEndpointResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
            /// OK
        public internal(set) var postmanCollection: Data?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct GetAllApiEndpointsRequest: APIValue {
            /// The ID of the Api to retrieve ApiEndpoints for.
        public let apiID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to retrieve ApiEndpoints for.
        ///
        public init(apiID: String) {
            self.apiID = apiID
        }
    }

    /// A response model
    public struct GetAllApiEndpointsResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// OK
        public internal(set) var apiEndpoints: [Shared.ApiEndpoint]?
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct GetAllForVersionApiEndpointsRequest: APIValue {
            /// The ID of the Api to retrieve ApiEndpoints for.
        public let apiID: String
            /// The version ID of the Api to retrieve ApiEndpoints for.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to retrieve ApiEndpoints for.
        /// - Parameter versionID: The version ID of the Api to retrieve ApiEndpoints for.
        ///
        public init(apiID: String, versionID: String) {
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public struct GetAllForVersionApiEndpointsResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// OK
        public internal(set) var apiEndpoints: [Shared.ApiEndpoint]?
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct GetApiEndpointRequest: APIValue {
            /// The ID of the ApiEndpoint to retrieve.
        public let apiEndpointID: String
            /// The ID of the Api the ApiEndpoint belongs to.
        public let apiID: String
            /// The version ID of the Api the ApiEndpoint belongs to.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiEndpointID: The ID of the ApiEndpoint to retrieve.
        /// - Parameter apiID: The ID of the Api the ApiEndpoint belongs to.
        /// - Parameter versionID: The version ID of the Api the ApiEndpoint belongs to.
        ///
        public init(apiEndpointID: String, apiID: String, versionID: String) {
            self.apiEndpointID = apiEndpointID
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public struct GetApiEndpointResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// OK
        public internal(set) var apiEndpoint: Shared.ApiEndpoint?
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct UpsertApiEndpointRequest: APIValue {
            /// The ID of the ApiEndpoint to upsert.
        public let apiEndpointID: String
            /// A JSON representation of the ApiEndpoint to upsert.
        public let apiEndpointInput: Shared.ApiEndpointInput
            /// The ID of the Api the ApiEndpoint belongs to.
        public let apiID: String
            /// The version ID of the Api the ApiEndpoint belongs to.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiEndpointID: The ID of the ApiEndpoint to upsert.
        /// - Parameter apiEndpointInput: A JSON representation of the ApiEndpoint to upsert.
        /// - Parameter apiID: The ID of the Api the ApiEndpoint belongs to.
        /// - Parameter versionID: The version ID of the Api the ApiEndpoint belongs to.
        ///
        public init(apiEndpointID: String, apiEndpointInput: Shared.ApiEndpointInput, apiID: String, versionID: String) {
            self.apiEndpointID = apiEndpointID
            self.apiEndpointInput = apiEndpointInput
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public struct UpsertApiEndpointResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// OK
        public internal(set) var apiEndpoint: Shared.ApiEndpoint?
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct DeleteApiRequest: APIValue {
            /// The ID of the Api to delete.
        public let apiID: String
            /// The version ID of the Api to delete.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to delete.
        /// - Parameter versionID: The version ID of the Api to delete.
        ///
        public init(apiID: String, versionID: String) {
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public struct DeleteApiResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct GenerateOpenApiSpecRequest: APIValue {
            /// The ID of the Api to generate an OpenAPI specification for.
        public let apiID: String
            /// The version ID of the Api to generate an OpenAPI specification for.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to generate an OpenAPI specification for.
        /// - Parameter versionID: The version ID of the Api to generate an OpenAPI specification for.
        ///
        public init(apiID: String, versionID: String) {
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public struct GenerateOpenApiSpecResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
            /// OK
        public internal(set) var generateOpenApiSpecDiff: Shared.GenerateOpenApiSpecDiff?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct GeneratePostmanCollectionRequest: APIValue {
            /// The ID of the Api to generate a Postman collection for.
        public let apiID: String
            /// The version ID of the Api to generate a Postman collection for.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to generate a Postman collection for.
        /// - Parameter versionID: The version ID of the Api to generate a Postman collection for.
        ///
        public init(apiID: String, versionID: String) {
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public struct GeneratePostmanCollectionResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
            /// OK
        public internal(set) var postmanCollection: Data?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// Configuration for filter operations
    public struct GetAllApiVersionsOp: APIValue {
            /// Whether to AND or OR the filters
        public let and: Bool

        /// Creates an object with the specified parameters
        ///
        /// - Parameter and: Whether to AND or OR the filters
        ///
        public init(and: Bool) {
            self.and = and
        }
    }

    /// A request model
    public struct GetAllApiVersionsRequest: APIValue {
            /// The ID of the Api to retrieve.
        public let apiID: String
            /// Metadata to filter Apis on
        public let metadata: [String: [String]]?
            /// Configuration for filter operations
        public let op: Operations.GetAllApiVersionsOp?

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to retrieve.
        /// - Parameter metadata: Metadata to filter Apis on
        /// - Parameter op: Configuration for filter operations
        ///
        public init(apiID: String, metadata: [String: [String]]? = nil, op: Operations.GetAllApiVersionsOp? = nil) {
            self.apiID = apiID
            self.metadata = metadata
            self.op = op
        }
    }

    /// A response model
    public struct GetAllApiVersionsResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// OK
        public internal(set) var apis: [Shared.Api]?
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// Configuration for filter operations
    public struct GetApisOp: APIValue {
            /// Whether to AND or OR the filters
        public let and: Bool

        /// Creates an object with the specified parameters
        ///
        /// - Parameter and: Whether to AND or OR the filters
        ///
        public init(and: Bool) {
            self.and = and
        }
    }

    /// A request model
    public struct GetApisRequest: APIValue {
            /// Metadata to filter Apis on
        public let metadata: [String: [String]]?
            /// Configuration for filter operations
        public let op: Operations.GetApisOp?

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter metadata: Metadata to filter Apis on
        /// - Parameter op: Configuration for filter operations
        ///
        public init(metadata: [String: [String]]? = nil, op: Operations.GetApisOp? = nil) {
            self.metadata = metadata
            self.op = op
        }
    }

    /// A response model
    public struct GetApisResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// OK
        public internal(set) var apis: [Shared.Api]?
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct UpsertApiRequest: APIValue {
            /// The ID of the Api to upsert.
        public let apiID: String
            /// A JSON representation of the Api to upsert
        public let apiInput: Shared.ApiInput

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to upsert.
        /// - Parameter apiInput: A JSON representation of the Api to upsert
        ///
        public init(apiID: String, apiInput: Shared.ApiInput) {
            self.apiID = apiID
            self.apiInput = apiInput
        }
    }

    /// A response model
    public struct UpsertApiResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// OK
        public internal(set) var api: Shared.Api?
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct GetEmbedAccessTokenRequest: APIValue {
            /// The description of the embed access token.
        public let description: String?
            /// The duration (in minutes) of the embed access token.
        public let duration: Int?
            /// The filter to apply to the query.
        public let filters: Shared.Filters?

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter description: The description of the embed access token.
        /// - Parameter duration: The duration (in minutes) of the embed access token.
        /// - Parameter filters: The filter to apply to the query.
        ///
        public init(description: String? = nil, duration: Int? = nil, filters: Shared.Filters? = nil) {
            self.description = description
            self.duration = duration
            self.filters = filters
        }
    }

    /// A response model
    public struct GetEmbedAccessTokenResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// OK
        public internal(set) var embedAccessTokenResponse: Shared.EmbedAccessTokenResponse?
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A response model
    public struct GetValidEmbedAccessTokensResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// OK
        public internal(set) var embedTokens: [Shared.EmbedToken]?
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct RevokeEmbedAccessTokenRequest: APIValue {
            /// The ID of the EmbedToken to revoke.
        public let tokenID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter tokenID: The ID of the EmbedToken to revoke.
        ///
        public init(tokenID: String) {
            self.tokenID = tokenID
        }
    }

    /// A response model
    public struct RevokeEmbedAccessTokenResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct DeleteVersionMetadataRequest: APIValue {
            /// The ID of the Api to delete metadata for.
        public let apiID: String
            /// The key of the metadata to delete.
        public let metaKey: String
            /// The value of the metadata to delete.
        public let metaValue: String
            /// The version ID of the Api to delete metadata for.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to delete metadata for.
        /// - Parameter metaKey: The key of the metadata to delete.
        /// - Parameter metaValue: The value of the metadata to delete.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, metaKey: String, metaValue: String, versionID: String) {
            self.apiID = apiID
            self.metaKey = metaKey
            self.metaValue = metaValue
            self.versionID = versionID
        }
    }

    /// A response model
    public struct DeleteVersionMetadataResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct GetVersionMetadataRequest: APIValue {
            /// The ID of the Api to retrieve metadata for.
        public let apiID: String
            /// The version ID of the Api to retrieve metadata for.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to retrieve metadata for.
        /// - Parameter versionID: The version ID of the Api to retrieve metadata for.
        ///
        public init(apiID: String, versionID: String) {
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public struct GetVersionMetadataResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
            /// OK
        public internal(set) var versionMetadata: [Shared.VersionMetadata]?
    }

    /// A request model
    public struct InsertVersionMetadataRequest: APIValue {
            /// The ID of the Api to insert metadata for.
        public let apiID: String
            /// The version ID of the Api to insert metadata for.
        public let versionID: String
            /// A JSON representation of the metadata to insert.
        public let versionMetadataInput: Shared.VersionMetadataInput

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to insert metadata for.
        /// - Parameter versionID: The version ID of the Api to insert metadata for.
        /// - Parameter versionMetadataInput: A JSON representation of the metadata to insert.
        ///
        public init(apiID: String, versionID: String, versionMetadataInput: Shared.VersionMetadataInput) {
            self.apiID = apiID
            self.versionID = versionID
            self.versionMetadataInput = versionMetadataInput
        }
    }

    /// A response model
    public struct InsertVersionMetadataResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
            /// OK
        public internal(set) var versionMetadata: Shared.VersionMetadata?
    }

    /// A response model
    public struct GetPluginsResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
            /// OK
        public internal(set) var plugins: [Shared.Plugin]?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct RunPluginRequest: APIValue {
            /// The ID of the plugin to run.
        public let pluginID: String
            /// The filter to apply to the query.
        public let filters: Shared.Filters?

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter pluginID: The ID of the plugin to run.
        /// - Parameter filters: The filter to apply to the query.
        ///
        public init(pluginID: String, filters: Shared.Filters? = nil) {
            self.pluginID = pluginID
            self.filters = filters
        }
    }

    /// A response model
    public struct RunPluginResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// OK
        public internal(set) var boundedRequests: [Shared.BoundedRequest]?
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A response model
    public struct UpsertPluginResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
            /// OK
        public internal(set) var plugin: Shared.Plugin?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct GenerateRequestPostmanCollectionRequest: APIValue {
            /// The ID of the request to retrieve.
        public let requestID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter requestID: The ID of the request to retrieve.
        ///
        public init(requestID: String) {
            self.requestID = requestID
        }
    }

    /// A response model
    public struct GenerateRequestPostmanCollectionResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
            /// OK
        public internal(set) var postmanCollection: Data?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct GetRequestFromEventLogRequest: APIValue {
            /// The ID of the request to retrieve.
        public let requestID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter requestID: The ID of the request to retrieve.
        ///
        public init(requestID: String) {
            self.requestID = requestID
        }
    }

    /// A response model
    public struct GetRequestFromEventLogResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
            /// OK
        public internal(set) var unboundedRequest: Shared.UnboundedRequest?
    }

    /// A request model
    public struct QueryEventLogRequest: APIValue {
            /// The filter to apply to the query.
        public let filters: Shared.Filters?

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter filters: The filter to apply to the query.
        ///
        public init(filters: Shared.Filters? = nil) {
            self.filters = filters
        }
    }

    /// A response model
    public struct QueryEventLogResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// OK
        public internal(set) var boundedRequests: [Shared.BoundedRequest]?
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct DeleteSchemaRequest: APIValue {
            /// The ID of the Api to delete schemas for.
        public let apiID: String
            /// The revision ID of the schema to delete.
        public let revisionID: String
            /// The version ID of the Api to delete metadata for.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to delete schemas for.
        /// - Parameter revisionID: The revision ID of the schema to delete.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, revisionID: String, versionID: String) {
            self.apiID = apiID
            self.revisionID = revisionID
            self.versionID = versionID
        }
    }

    /// A response model
    public struct DeleteSchemaResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

    /// A request model
    public struct DownloadSchemaRequest: APIValue {
            /// The ID of the Api to download the schema for.
        public let apiID: String
            /// The version ID of the Api to delete metadata for.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to download the schema for.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, versionID: String) {
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public struct DownloadSchemaResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
            /// OK
        public internal(set) var schema: Data?
    }

    /// A request model
    public struct DownloadSchemaRevisionRequest: APIValue {
            /// The ID of the Api to retrieve schemas for.
        public let apiID: String
            /// The revision ID of the schema to retrieve.
        public let revisionID: String
            /// The version ID of the Api to delete metadata for.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to retrieve schemas for.
        /// - Parameter revisionID: The revision ID of the schema to retrieve.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, revisionID: String, versionID: String) {
            self.apiID = apiID
            self.revisionID = revisionID
            self.versionID = versionID
        }
    }

    /// A response model
    public struct DownloadSchemaRevisionResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
            /// OK
        public internal(set) var schema: Data?
    }

    /// A request model
    public struct GetSchemaRequest: APIValue {
            /// The ID of the Api to get the schema for.
        public let apiID: String
            /// The version ID of the Api to delete metadata for.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to get the schema for.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, versionID: String) {
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public struct GetSchemaResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
            /// OK
        public internal(set) var schema: Shared.Schema?
    }

    /// A request model
    public struct GetSchemaDiffRequest: APIValue {
            /// The ID of the Api to retrieve schemas for.
        public let apiID: String
            /// The base revision ID of the schema to retrieve.
        public let baseRevisionID: String
            /// The target revision ID of the schema to retrieve.
        public let targetRevisionID: String
            /// The version ID of the Api to delete metadata for.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to retrieve schemas for.
        /// - Parameter baseRevisionID: The base revision ID of the schema to retrieve.
        /// - Parameter targetRevisionID: The target revision ID of the schema to retrieve.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, baseRevisionID: String, targetRevisionID: String, versionID: String) {
            self.apiID = apiID
            self.baseRevisionID = baseRevisionID
            self.targetRevisionID = targetRevisionID
            self.versionID = versionID
        }
    }

    /// A response model
    public struct GetSchemaDiffResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
            /// OK
        public internal(set) var schemaDiff: Shared.SchemaDiff?
    }

    /// A request model
    public struct GetSchemaRevisionRequest: APIValue {
            /// The ID of the Api to retrieve schemas for.
        public let apiID: String
            /// The revision ID of the schema to retrieve.
        public let revisionID: String
            /// The version ID of the Api to delete metadata for.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to retrieve schemas for.
        /// - Parameter revisionID: The revision ID of the schema to retrieve.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, revisionID: String, versionID: String) {
            self.apiID = apiID
            self.revisionID = revisionID
            self.versionID = versionID
        }
    }

    /// A response model
    public struct GetSchemaRevisionResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
            /// OK
        public internal(set) var schema: Shared.Schema?
    }

    /// A request model
    public struct GetSchemasRequest: APIValue {
            /// The ID of the Api to retrieve schemas for.
        public let apiID: String
            /// The version ID of the Api to delete metadata for.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to retrieve schemas for.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, versionID: String) {
            self.apiID = apiID
            self.versionID = versionID
        }
    }

    /// A response model
    public struct GetSchemasResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
            /// OK
        public internal(set) var schemata: [Shared.Schema]?
    }

    /// A model object
    public struct RegisterSchemaRequestBodyFile: APIValue {
        public let content: Data
        public let file: String

        /// Creates an object with the specified parameters
        ///
        ///
        public init(content: Data, file: String) {
            self.content = content
            self.file = file
        }
    }

    /// The schema file to upload provided as a multipart/form-data file segment.
    public struct RegisterSchemaRequestBody: APIValue {
        public let file: Operations.RegisterSchemaRequestBodyFile

        /// Creates an object with the specified parameters
        ///
        ///
        public init(file: Operations.RegisterSchemaRequestBodyFile) {
            self.file = file
        }
    }

    /// A request model
    public struct RegisterSchemaRequest: APIValue {
            /// The ID of the Api to get the schema for.
        public let apiID: String
            /// The schema file to upload provided as a multipart/form-data file segment.
        public let requestBody: Operations.RegisterSchemaRequestBody
            /// The version ID of the Api to delete metadata for.
        public let versionID: String

        /// Creates a request model with the specified parameters
        ///
        /// - Parameter apiID: The ID of the Api to get the schema for.
        /// - Parameter requestBody: The schema file to upload provided as a multipart/form-data file segment.
        /// - Parameter versionID: The version ID of the Api to delete metadata for.
        ///
        public init(apiID: String, requestBody: Operations.RegisterSchemaRequestBody, versionID: String) {
            self.apiID = apiID
            self.requestBody = requestBody
            self.versionID = versionID
        }
    }

    /// A response model
    public struct RegisterSchemaResponse {
        public internal(set) var contentType: String
        public internal(set) var statusCode: Int
            /// Default error response
        public internal(set) var error: Shared.Error?
        public internal(set) var rawResponse: HTTPURLResponse?
    }

}